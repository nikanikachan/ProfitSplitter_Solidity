pragma solidity ^0.5.0;

// lvl 1: equal split
contract AssociateProfitSplitter {
    // @TODO: Create three payable addresses representing `employee_one`, `employee_two` and `employee_three`.

    address payable employee_one;
    address payable employee_two;
    address payable employee_three;

    constructor(address payable _one, address payable _two, address payable _three) public {
        employee_one = _one;
        employee_two = _two;
        employee_three = _three;
    }

    function balance() public view returns(uint) {
        return address(this).balance;
    }

    function deposit() public payable {
        // @TODO: Split `msg.value` into three
        uint amount = msg.value/3 ; // Your code here!

        // @TODO: Transfer the amount to each employee
        employee_one.transfer(amount);
        employee_two.transfer(amount);
        employee_three.transfer(amount);// Your code here!

        // @TODO: take care of a potential remainder by sending back to HR (`msg.sender`)
        msg.sender.transfer (msg.value - amount * 3);// Your code here!
    }

    function() external payable {
        // @TODO: Enforce that the `deposit` function is called in the fallback function!
        deposit();
    }
}

----

pragma solidity ^0.5.0;

// lvl 2: tiered split
contract TieredProfitSplitter {
    address payable employee_one; // ceo
    address payable employee_two; // cto
    address payable employee_three; // bob

    constructor(address payable _one, address payable _two, address payable _three) public {
        employee_one = _one;
        employee_two = _two;
        employee_three = _three;
    }

    // Should always return 0! Use this to test your `deposit` function's logic
    function balance() public view returns(uint) {
        return address(this).balance;
    }

    function deposit() public payable {
        uint points = msg.value / 100; // Calculates rudimentary percentage by dividing msg.value into 100 units
        uint total;
        uint amount;

        // @TODO: Calculate and transfer the distribution percentage
        amount = points * 60; // Step 1: Set amount to equal `points` * the number of percentage points for this employee
        total += amount; // Step 2: Add the `amount` to `total` to keep a running total
        employee_one.transfer(amount); // Step 3: Transfer the `amount` to the employee

        // @TODO: Repeat the previous steps for `employee_two` and `employee_three`
        amount = points * 25;
        total += amount;
        employee_two.transfer(amount); 
        
        amount = points *15;
        total += amount;
        employee_three.transfer(amount);
        

        employee_one.transfer(msg.value - total); // ceo gets the remaining wei
    }

    function() external payable {
        deposit();
    }
}
------

pragma solidity ^0.5.0;

// lvl 3: equity plan
contract DeferredEquityPlan {
    
    uint fakenow = now;
    
    address human_resources;

    address payable employee; // bob
    bool active = true; // this employee is active at the start of the contract

    // @TODO: Set the total shares and annual distribution
    uint total_shares = 1000;
    uint annual_distribution = 250; // Your code here!
 

    uint start_time = fakenow; // permanently store the time this contract was initialized

    // @TODO: Set the `unlock_time` to be 365 days from now
    uint unlock_time = fakenow + 365 days; // Your code here!

    uint public distributed_shares; // starts at 0

    constructor(address payable _employee) public {
        human_resources = msg.sender;
        employee = _employee;
    }

    function fastforward() public {
     fakenow += 365 days;
    }


    function distribute() public {
        require(msg.sender == human_resources || msg.sender == employee, "You are not authorized to execute this contract.");
        require(active == true, "Contract not active.");

        // @TODO: Add "require" statements to enforce that:
        require (unlock_time <= fakenow , "Your account is locked!"); // 1: `unlock_time` is less than or equal to `now`
        require (distributed_shares < total_shares, "All your shares have vested"); // 2: `distributed_shares` is less than the `total_shares`
        // Your code here!

        // @TODO: Add 365 days to the `unlock_time`
        unlock_time += 365 days; // Your code here!

        // @TODO: Calculate the shares distributed by using the function (now - start_time) / 365 days * the annual distribution
        distributed_shares = ((fakenow - start_time) / 365 days * annual_distribution); // Make sure to include the parenthesis around (now - start_time) to get accurate results!
        // Your code here!

        // double check in case the employee does not cash out until after 5+ years
        if (distributed_shares > 1000) {
            distributed_shares = 1000;
        }
    }

    // human_resources and the employee can deactivate this contract at-will
    function deactivate() public {
        require(msg.sender == human_resources || msg.sender == employee, "You are not authorized to deactivate this contract.");
        active = false;
    }

    // Since we do not need to handle Ether in this contract, revert any Ether sent to the contract directly
    function() external payable {
        revert("Do not send Ether to this contract!");
    }
}


